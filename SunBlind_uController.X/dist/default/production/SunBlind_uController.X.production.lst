

Microchip MPLAB XC8 Assembler V2.05 build -831301201 
                                                                                               Sat Aug 24 14:34:59 2019

Microchip MPLAB XC8 C Compiler v2.05 (Free license) build 20181220022703 Og1 
     1                           	processor	12F675
     2                           	opt	pw 120
     3                           	opt	flic
     4                           	psect	strings,global,class=STRING,delta=2
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     7                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
     8                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	maintext,global,class=CODE,split=1,delta=2
    10                           	psect	text1,local,class=CODE,merge=1,delta=2
    11                           	psect	text2,local,class=CODE,merge=1,delta=2,group=1
    12                           	psect	text3,local,class=CODE,merge=1,delta=2,group=1
    13                           	psect	text4,local,class=CODE,merge=1,delta=2
    14                           	psect	text5,local,class=CODE,merge=1,delta=2
    15                           	psect	intentry,global,class=CODE,delta=2
    16                           	psect	text6,local,class=CODE,merge=1,delta=2
    17                           	dabs	1,0x5E,2
    18  0000                     
    19                           ; Version 2.05
    20                           ; Generated 20/12/2018 GMT
    21                           ; 
    22                           ; Copyright Â© 2018, Microchip Technology Inc. and its subsidiaries ("Microchip")
    23                           ; All rights reserved.
    24                           ; 
    25                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    26                           ; 
    27                           ; Redistribution and use in source and binary forms, with or without modification, are
    28                           ; permitted provided that the following conditions are met:
    29                           ; 
    30                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    31                           ;        conditions and the following disclaimer.
    32                           ; 
    33                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    34                           ;        of conditions and the following disclaimer in the documentation and/or other
    35                           ;        materials provided with the distribution.
    36                           ; 
    37                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    38                           ;        software without specific prior written permission.
    39                           ; 
    40                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    41                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    42                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    43                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    44                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    45                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    46                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    47                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    48                           ; 
    49                           ; 
    50                           ; Code-generator required, PIC12F675 Definitions
    51                           ; 
    52                           ; SFR Addresses
    53  0000                     	;# 
    54  0001                     	;# 
    55  0002                     	;# 
    56  0003                     	;# 
    57  0004                     	;# 
    58  0005                     	;# 
    59  000A                     	;# 
    60  000B                     	;# 
    61  000C                     	;# 
    62  000E                     	;# 
    63  000E                     	;# 
    64  000F                     	;# 
    65  0010                     	;# 
    66  0019                     	;# 
    67  001E                     	;# 
    68  001F                     	;# 
    69  0081                     	;# 
    70  0085                     	;# 
    71  008C                     	;# 
    72  008E                     	;# 
    73  0090                     	;# 
    74  0095                     	;# 
    75  0096                     	;# 
    76  0096                     	;# 
    77  0099                     	;# 
    78  009A                     	;# 
    79  009A                     	;# 
    80  009B                     	;# 
    81  009C                     	;# 
    82  009D                     	;# 
    83  009E                     	;# 
    84  009F                     	;# 
    85  0000                     	;# 
    86  0001                     	;# 
    87  0002                     	;# 
    88  0003                     	;# 
    89  0004                     	;# 
    90  0005                     	;# 
    91  000A                     	;# 
    92  000B                     	;# 
    93  000C                     	;# 
    94  000E                     	;# 
    95  000E                     	;# 
    96  000F                     	;# 
    97  0010                     	;# 
    98  0019                     	;# 
    99  001E                     	;# 
   100  001F                     	;# 
   101  0081                     	;# 
   102  0085                     	;# 
   103  008C                     	;# 
   104  008E                     	;# 
   105  0090                     	;# 
   106  0095                     	;# 
   107  0096                     	;# 
   108  0096                     	;# 
   109  0099                     	;# 
   110  009A                     	;# 
   111  009A                     	;# 
   112  009B                     	;# 
   113  009C                     	;# 
   114  009D                     	;# 
   115  009E                     	;# 
   116  009F                     	;# 
   117                           
   118                           	psect	strings
   119  0226                     __pstrings:	
   120  0226                     stringtab:	
   121  0226                     __stringtab:	
   122  0226                     stringcode:	
   123                           ;	String table - string pointers are 1 byte each
   124                           
   125  0226                     stringdir:	
   126  0226  3002               	movlw	high stringdir
   127  0227  008A               	movwf	10
   128  0228  0804               	movf	4,w
   129  0229  0A84               	incf	4,f
   130  022A  0782               	addwf	2,f
   131  022B                     __stringbase:	
   132  022B  3400               	retlw	0
   133  022C                     __end_of__stringtab:	
   134  022C                     SetTMR0@clk_freq:	
   135  022C  3440               	retlw	64
   136  022D  3442               	retlw	66
   137  022E  340F               	retlw	15
   138  022F  3400               	retlw	0
   139  0230                     __end_ofSetTMR0@clk_freq:	
   140  0005                     _GPIO	set	5
   141  0019                     _CMCON	set	25
   142  0001                     _TMR0	set	1
   143  000B                     _INTCONbits	set	11
   144  0005                     _GPIObits	set	5
   145  0081                     _OPTION_REGbits	set	129
   146  009F                     _ANSEL	set	159
   147  042D                     _TRISIO5	set	1069
   148  042C                     _TRISIO4	set	1068
   149  042A                     _TRISIO2	set	1066
   150  042B                     _TRISIO3	set	1067
   151  0429                     _TRISIO1	set	1065
   152  0428                     _TRISIO0	set	1064
   153                           
   154                           ; #config settings
   155  0000                     
   156                           	psect	cinit
   157  000C                     start_initialization:	
   158  000C                     __initialization:	
   159                           
   160                           ; Clear objects allocated to BANK0
   161  000C  1283               	bcf	3,5	;RP0=0, select bank0
   162  000D  01C1               	clrf	__pbssBANK0& (0+127)
   163  000E  01C2               	clrf	(__pbssBANK0+1)& (0+127)
   164  000F  01C3               	clrf	(__pbssBANK0+2)& (0+127)
   165  0010  01C4               	clrf	(__pbssBANK0+3)& (0+127)
   166  0011  01C5               	clrf	(__pbssBANK0+4)& (0+127)
   167  0012  01C6               	clrf	(__pbssBANK0+5)& (0+127)
   168  0013  01C7               	clrf	(__pbssBANK0+6)& (0+127)
   169  0014  01C8               	clrf	(__pbssBANK0+7)& (0+127)
   170  0015                     end_of_initialization:	
   171                           ;End of C runtime variable initialization code
   172                           
   173  0015                     __end_of__initialization:	
   174  0015  0183               	clrf	3
   175  0016  29DA               	ljmp	_main	;jump to C main() function
   176                           
   177                           	psect	bssBANK0
   178  0041                     __pbssBANK0:	
   179  0041                     _cntRSTpls:	
   180  0041                     	ds	2
   181  0043                     _cntWD:	
   182  0043                     	ds	2
   183  0045                     _cntRST:	
   184  0045                     	ds	2
   185  0047                     _TMR0_value:	
   186  0047                     	ds	1
   187  0048                     _lastGPIO4mirror:	
   188  0048                     	ds	1
   189                           
   190                           	psect	cstackCOMMON
   191  0000                     __pcstackCOMMON:	
   192  0000                     ??_SETpinRST:	
   193  0000                     ??i1_SETpinRST:	
   194                           ; 1 bytes @ 0x0
   195                           
   196                           
   197                           	psect	cstackBANK0
   198  0020                     __pcstackBANK0:	
   199                           ; 1 bytes @ 0x0
   200                           
   201  0020                     ?_myIsr:	
   202  0020                     ?_main:	
   203                           ; 1 bytes @ 0x0
   204                           
   205  0020                     ?i1_SETpinRST:	
   206                           ; 1 bytes @ 0x0
   207                           
   208  0020                     i1SETpinRST@Status:	
   209                           ; 1 bytes @ 0x0
   210                           
   211                           
   212                           ; 2 bytes @ 0x0
   213  0020                     	ds	2
   214  0022                     ??_myIsr:	
   215                           
   216                           ; 1 bytes @ 0x2
   217  0022                     	ds	2
   218  0024                     ?_SETpinRST:	
   219  0024                     ?___lmul:	
   220                           ; 1 bytes @ 0x4
   221                           
   222  0024                     ?___lldiv:	
   223                           ; 4 bytes @ 0x4
   224                           
   225  0024                     SETpinRST@Status:	
   226                           ; 4 bytes @ 0x4
   227                           
   228  0024                     ___lmul@multiplier:	
   229                           ; 2 bytes @ 0x4
   230                           
   231  0024                     ___lldiv@divisor:	
   232                           ; 4 bytes @ 0x4
   233                           
   234                           
   235                           ; 4 bytes @ 0x4
   236  0024                     	ds	4
   237  0028                     ___lmul@multiplicand:	
   238  0028                     ___lldiv@dividend:	
   239                           ; 4 bytes @ 0x8
   240                           
   241                           
   242                           ; 4 bytes @ 0x8
   243  0028                     	ds	4
   244  002C                     ??___lmul:	
   245  002C                     ??___lldiv:	
   246                           ; 1 bytes @ 0xC
   247                           
   248                           
   249                           ; 1 bytes @ 0xC
   250  002C                     	ds	1
   251  002D                     ___lmul@product:	
   252  002D                     ___lldiv@quotient:	
   253                           ; 4 bytes @ 0xD
   254                           
   255                           
   256                           ; 4 bytes @ 0xD
   257  002D                     	ds	4
   258  0031                     ___lldiv@counter:	
   259                           
   260                           ; 1 bytes @ 0x11
   261  0031                     	ds	1
   262  0032                     ?_SetTMR0:	
   263  0032                     SetTMR0@value_ms:	
   264                           ; 1 bytes @ 0x12
   265                           
   266                           
   267                           ; 2 bytes @ 0x12
   268  0032                     	ds	2
   269  0034                     ??_SetTMR0:	
   270                           
   271                           ; 1 bytes @ 0x14
   272  0034                     	ds	4
   273  0038                     SetTMR0@ps_value:	
   274                           
   275                           ; 2 bytes @ 0x18
   276  0038                     	ds	2
   277  003A                     SetTMR0@ps_cnt:	
   278                           
   279                           ; 2 bytes @ 0x1A
   280  003A                     	ds	2
   281  003C                     SetTMR0@TMR0value:	
   282                           
   283                           ; 4 bytes @ 0x1C
   284  003C                     	ds	4
   285  0040                     ??_main:	
   286                           
   287                           ; 1 bytes @ 0x20
   288  0040                     	ds	1
   289                           
   290                           	psect	maintext
   291  01DA                     __pmaintext:	
   292 ;;
   293 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
   294 ;;
   295 ;; *************** function _main *****************
   296 ;; Defined at:
   297 ;;		line 132 in file "main.c"
   298 ;; Parameters:    Size  Location     Type
   299 ;;		None
   300 ;; Auto vars:     Size  Location     Type
   301 ;;		None
   302 ;; Return value:  Size  Location     Type
   303 ;;                  1    wreg      void 
   304 ;; Registers used:
   305 ;;		wreg, status,2, status,0, pclath, cstack
   306 ;; Tracked objects:
   307 ;;		On entry : B00/0
   308 ;;		On exit  : 0/0
   309 ;;		Unchanged: 0/0
   310 ;; Data sizes:     COMMON   BANK0
   311 ;;      Params:         0       0
   312 ;;      Locals:         0       0
   313 ;;      Temps:          0       1
   314 ;;      Totals:         0       1
   315 ;;Total ram usage:        1 bytes
   316 ;; Hardware stack levels required when called:    4
   317 ;; This function calls:
   318 ;;		_SETpinRST
   319 ;;		_SetTMR0
   320 ;; This function is called by:
   321 ;;		Startup code after reset
   322 ;; This function uses a non-reentrant model
   323 ;;
   324                           
   325                           
   326                           ;psect for function _main
   327  01DA                     _main:	
   328                           
   329                           ;main.c: 135: CMCON = 0x07;
   330                           
   331                           ;incstack = 0
   332                           ; Regs used in _main: [wreg+status,2+status,0+pclath+cstack]
   333  01DA  3007               	movlw	7
   334  01DB  1283               	bcf	3,5	;RP0=0, select bank0
   335  01DC  0099               	movwf	25	;volatile
   336                           
   337                           ;main.c: 137: ANSEL = 0x00;
   338  01DD  1683               	bsf	3,5	;RP0=1, select bank1
   339  01DE  019F               	clrf	31	;volatile
   340                           
   341                           ;main.c: 141: GPIO = 0xFF;
   342  01DF  30FF               	movlw	255
   343  01E0  1283               	bcf	3,5	;RP0=0, select bank0
   344  01E1  0085               	movwf	5	;volatile
   345                           
   346                           ;main.c: 143: TRISIO0 = 0b1 ;
   347  01E2  1683               	bsf	3,5	;RP0=1, select bank1
   348  01E3  1405               	bsf	5,0	;volatile
   349                           
   350                           ;main.c: 144: TRISIO1 = 0b0;
   351  01E4  1085               	bcf	5,1	;volatile
   352                           
   353                           ;main.c: 145: TRISIO3 = 0b1 ;
   354  01E5  1585               	bsf	5,3	;volatile
   355                           
   356                           ;main.c: 146: TRISIO2 = 0b1 ;
   357  01E6  1505               	bsf	5,2	;volatile
   358                           
   359                           ;main.c: 147: TRISIO4 = 0b1 ;
   360  01E7  1605               	bsf	5,4	;volatile
   361                           
   362                           ;main.c: 148: TRISIO5 = 0b0 ;
   363  01E8  1285               	bcf	5,5	;volatile
   364                           
   365                           ;main.c: 150: SETpinRST(0b1);
   366  01E9  3001               	movlw	1
   367  01EA  1283               	bcf	3,5	;RP0=0, select bank0
   368  01EB  00A4               	movwf	SETpinRST@Status
   369  01EC  3000               	movlw	0
   370  01ED  00A5               	movwf	SETpinRST@Status+1
   371  01EE  220A               	fcall	_SETpinRST
   372                           
   373                           ;main.c: 152: lastGPIO4mirror=GPIObits.GP4;
   374  01EF  3000               	movlw	0
   375  01F0  1283               	bcf	3,5	;RP0=0, select bank0
   376  01F1  1A05               	btfsc	5,4	;volatile
   377  01F2  3001               	movlw	1
   378  01F3  00C8               	movwf	_lastGPIO4mirror
   379                           
   380                           ;main.c: 154: cntWD = 60*100;
   381  01F4  3070               	movlw	112
   382  01F5  00C3               	movwf	_cntWD
   383  01F6  3017               	movlw	23
   384  01F7  00C4               	movwf	_cntWD+1
   385                           
   386                           ;main.c: 155: cntRST = 10*100;
   387  01F8  30E8               	movlw	232
   388  01F9  00C5               	movwf	_cntRST
   389  01FA  3003               	movlw	3
   390  01FB  00C6               	movwf	_cntRST+1
   391                           
   392                           ;main.c: 156: cntRSTpls = 0;
   393  01FC  01C1               	clrf	_cntRSTpls
   394  01FD  01C2               	clrf	_cntRSTpls+1
   395                           
   396                           ;main.c: 159: TMR0_value=(byte)SetTMR0(10);
   397  01FE  300A               	movlw	10
   398  01FF  00B2               	movwf	SetTMR0@value_ms
   399  0200  3000               	movlw	0
   400  0201  00B3               	movwf	SetTMR0@value_ms+1
   401  0202  2017               	fcall	_SetTMR0
   402  0203  1283               	bcf	3,5	;RP0=0, select bank0
   403  0204  00C0               	movwf	??_main
   404  0205  0840               	movf	??_main,w
   405  0206  00C7               	movwf	_TMR0_value
   406                           
   407                           ;main.c: 161: INTCONbits.TMR0IE = 0b1;
   408  0207  168B               	bsf	11,5	;volatile
   409                           
   410                           ;main.c: 162: INTCONbits.GIE = 0b1;
   411  0208  178B               	bsf	11,7	;volatile
   412  0209                     l65:	
   413                           ;main.c: 164: while(1);
   414                           
   415  0209  2A09               	goto	l65
   416  020A                     __end_of_main:	
   417                           
   418                           	psect	text1
   419  0017                     __ptext1:	
   420 ;; *************** function _SetTMR0 *****************
   421 ;; Defined at:
   422 ;;		line 176 in file "main.c"
   423 ;; Parameters:    Size  Location     Type
   424 ;;  value_ms        2   18[BANK0 ] unsigned int 
   425 ;; Auto vars:     Size  Location     Type
   426 ;;  TMR0value       4   28[BANK0 ] unsigned long 
   427 ;;  ps_cnt          2   26[BANK0 ] unsigned int 
   428 ;;  ps_value        2   24[BANK0 ] unsigned int 
   429 ;; Return value:  Size  Location     Type
   430 ;;                  1    wreg      unsigned char 
   431 ;; Registers used:
   432 ;;		wreg, status,2, status,0, pclath, cstack
   433 ;; Tracked objects:
   434 ;;		On entry : 0/0
   435 ;;		On exit  : 0/0
   436 ;;		Unchanged: 0/0
   437 ;; Data sizes:     COMMON   BANK0
   438 ;;      Params:         0       2
   439 ;;      Locals:         0       8
   440 ;;      Temps:          0       4
   441 ;;      Totals:         0      14
   442 ;;Total ram usage:       14 bytes
   443 ;; Hardware stack levels used:    1
   444 ;; Hardware stack levels required when called:    3
   445 ;; This function calls:
   446 ;;		___lldiv
   447 ;;		___lmul
   448 ;; This function is called by:
   449 ;;		_main
   450 ;; This function uses a non-reentrant model
   451 ;;
   452                           
   453                           
   454                           ;psect for function _SetTMR0
   455  0017                     _SetTMR0:	
   456                           
   457                           ;main.c: 178: unsigned int ps_value;;main.c: 179: unsigned int ps_cnt;;main.c: 180: unsi
      +                          gned long TMR0value;;main.c: 181: const unsigned long clk_freq=1000000;;main.c: 183: for
      +                          (ps_cnt=0;ps_cnt<=8;ps_cnt++)
   458                           
   459                           ;incstack = 0
   460                           ; Regs used in _SetTMR0: [wreg+status,2+status,0+pclath+cstack]
   461  0017  1283               	bcf	3,5	;RP0=0, select bank0
   462  0018  01BA               	clrf	SetTMR0@ps_cnt
   463  0019  01BB               	clrf	SetTMR0@ps_cnt+1
   464  001A  3000               	movlw	0
   465  001B  023B               	subwf	SetTMR0@ps_cnt+1,w
   466  001C  3009               	movlw	9
   467  001D  1903               	skipnz
   468  001E  023A               	subwf	SetTMR0@ps_cnt,w
   469  001F  1803               	btfsc	3,0
   470  0020  2898               	goto	l901
   471  0021                     l887:	
   472                           
   473                           ;main.c: 184: {;main.c: 185: ps_value=(unsigned int)0b10<<ps_cnt;
   474  0021  0A3A               	incf	SetTMR0@ps_cnt,w
   475  0022  00B4               	movwf	??_SetTMR0
   476  0023  3002               	movlw	2
   477  0024  00B5               	movwf	??_SetTMR0+1
   478  0025  3000               	movlw	0
   479  0026  00B6               	movwf	??_SetTMR0+2
   480  0027  282B               	goto	u454
   481  0028                     u455:	
   482  0028  1003               	clrc
   483  0029  0DB5               	rlf	??_SetTMR0+1,f
   484  002A  0DB6               	rlf	??_SetTMR0+2,f
   485  002B                     u454:	
   486  002B  0BB4               	decfsz	??_SetTMR0,f
   487  002C  2828               	goto	u455
   488  002D  0835               	movf	??_SetTMR0+1,w
   489  002E  00B8               	movwf	SetTMR0@ps_value
   490  002F  0836               	movf	??_SetTMR0+2,w
   491  0030  00B9               	movwf	SetTMR0@ps_value+1
   492                           
   493                           ;main.c: 186: TMR0value=clk_freq*value_ms;
   494  0031  0832               	movf	SetTMR0@value_ms,w
   495  0032  00A4               	movwf	___lmul@multiplier
   496  0033  0833               	movf	SetTMR0@value_ms+1,w
   497  0034  00A5               	movwf	___lmul@multiplier+1
   498  0035  01A6               	clrf	___lmul@multiplier+2
   499  0036  01A7               	clrf	___lmul@multiplier+3
   500  0037  3000               	movlw	0
   501  0038  00AB               	movwf	___lmul@multiplicand+3
   502  0039  300F               	movlw	15
   503  003A  00AA               	movwf	___lmul@multiplicand+2
   504  003B  3042               	movlw	66
   505  003C  00A9               	movwf	___lmul@multiplicand+1
   506  003D  3040               	movlw	64
   507  003E  00A8               	movwf	___lmul@multiplicand
   508  003F  219A               	fcall	___lmul
   509  0040  1283               	bcf	3,5	;RP0=0, select bank0
   510  0041  0827               	movf	?___lmul+3,w
   511  0042  00BF               	movwf	SetTMR0@TMR0value+3
   512  0043  0826               	movf	?___lmul+2,w
   513  0044  00BE               	movwf	SetTMR0@TMR0value+2
   514  0045  0825               	movf	?___lmul+1,w
   515  0046  00BD               	movwf	SetTMR0@TMR0value+1
   516  0047  0824               	movf	?___lmul,w
   517  0048  00BC               	movwf	SetTMR0@TMR0value
   518                           
   519                           ;main.c: 187: TMR0value/=ps_value;
   520  0049  0838               	movf	SetTMR0@ps_value,w
   521  004A  00A4               	movwf	___lldiv@divisor
   522  004B  0839               	movf	SetTMR0@ps_value+1,w
   523  004C  00A5               	movwf	___lldiv@divisor+1
   524  004D  01A6               	clrf	___lldiv@divisor+2
   525  004E  01A7               	clrf	___lldiv@divisor+3
   526  004F  083F               	movf	SetTMR0@TMR0value+3,w
   527  0050  00AB               	movwf	___lldiv@dividend+3
   528  0051  083E               	movf	SetTMR0@TMR0value+2,w
   529  0052  00AA               	movwf	___lldiv@dividend+2
   530  0053  083D               	movf	SetTMR0@TMR0value+1,w
   531  0054  00A9               	movwf	___lldiv@dividend+1
   532  0055  083C               	movf	SetTMR0@TMR0value,w
   533  0056  00A8               	movwf	___lldiv@dividend
   534  0057  213B               	fcall	___lldiv
   535  0058  1283               	bcf	3,5	;RP0=0, select bank0
   536  0059  0827               	movf	?___lldiv+3,w
   537  005A  00BF               	movwf	SetTMR0@TMR0value+3
   538  005B  0826               	movf	?___lldiv+2,w
   539  005C  00BE               	movwf	SetTMR0@TMR0value+2
   540  005D  0825               	movf	?___lldiv+1,w
   541  005E  00BD               	movwf	SetTMR0@TMR0value+1
   542  005F  0824               	movf	?___lldiv,w
   543  0060  00BC               	movwf	SetTMR0@TMR0value
   544                           
   545                           ;main.c: 188: TMR0value/=1000;
   546  0061  3000               	movlw	0
   547  0062  00A7               	movwf	___lldiv@divisor+3
   548  0063  3000               	movlw	0
   549  0064  00A6               	movwf	___lldiv@divisor+2
   550  0065  3003               	movlw	3
   551  0066  00A5               	movwf	___lldiv@divisor+1
   552  0067  30E8               	movlw	232
   553  0068  00A4               	movwf	___lldiv@divisor
   554  0069  083F               	movf	SetTMR0@TMR0value+3,w
   555  006A  00AB               	movwf	___lldiv@dividend+3
   556  006B  083E               	movf	SetTMR0@TMR0value+2,w
   557  006C  00AA               	movwf	___lldiv@dividend+2
   558  006D  083D               	movf	SetTMR0@TMR0value+1,w
   559  006E  00A9               	movwf	___lldiv@dividend+1
   560  006F  083C               	movf	SetTMR0@TMR0value,w
   561  0070  00A8               	movwf	___lldiv@dividend
   562  0071  213B               	fcall	___lldiv
   563  0072  1283               	bcf	3,5	;RP0=0, select bank0
   564  0073  0827               	movf	?___lldiv+3,w
   565  0074  00BF               	movwf	SetTMR0@TMR0value+3
   566  0075  0826               	movf	?___lldiv+2,w
   567  0076  00BE               	movwf	SetTMR0@TMR0value+2
   568  0077  0825               	movf	?___lldiv+1,w
   569  0078  00BD               	movwf	SetTMR0@TMR0value+1
   570  0079  0824               	movf	?___lldiv,w
   571  007A  00BC               	movwf	SetTMR0@TMR0value
   572                           
   573                           ;main.c: 189: if(TMR0value<256) break;
   574  007B  083F               	movf	SetTMR0@TMR0value+3,w
   575  007C  1D03               	btfss	3,2
   576  007D  288B               	goto	l899
   577  007E  083E               	movf	SetTMR0@TMR0value+2,w
   578  007F  1D03               	btfss	3,2
   579  0080  288B               	goto	l899
   580  0081  3001               	movlw	1
   581  0082  023D               	subwf	SetTMR0@TMR0value+1,w
   582  0083  1D03               	skipz
   583  0084  2889               	goto	u463
   584  0085  3000               	movlw	0
   585  0086  023C               	subwf	SetTMR0@TMR0value,w
   586  0087  1D03               	skipz
   587  0088  2889               	goto	u463
   588  0089                     u463:	
   589  0089  1C03               	btfss	3,0
   590  008A  2898               	goto	l901
   591  008B                     l899:	
   592  008B  3001               	movlw	1
   593  008C  07BA               	addwf	SetTMR0@ps_cnt,f
   594  008D  1803               	skipnc
   595  008E  0ABB               	incf	SetTMR0@ps_cnt+1,f
   596  008F  3000               	movlw	0
   597  0090  07BB               	addwf	SetTMR0@ps_cnt+1,f
   598  0091  3000               	movlw	0
   599  0092  023B               	subwf	SetTMR0@ps_cnt+1,w
   600  0093  3009               	movlw	9
   601  0094  1903               	skipnz
   602  0095  023A               	subwf	SetTMR0@ps_cnt,w
   603  0096  1C03               	skipc
   604  0097  2821               	goto	l887
   605  0098                     l901:	
   606                           
   607                           ;main.c: 190: };main.c: 191: if(ps_cnt==8) return(0);
   608  0098  3008               	movlw	8
   609  0099  063A               	xorwf	SetTMR0@ps_cnt,w
   610  009A  043B               	iorwf	SetTMR0@ps_cnt+1,w
   611  009B  1D03               	btfss	3,2
   612  009C  289F               	goto	l81
   613  009D  3000               	movlw	0
   614  009E  0008               	return
   615  009F                     l81:	
   616                           
   617                           ;main.c: 192: else;main.c: 193: {;main.c: 195: OPTION_REGbits.PSA = 0b0;
   618  009F  1683               	bsf	3,5	;RP0=1, select bank1
   619  00A0  1181               	bcf	1,3	;volatile
   620                           
   621                           ;main.c: 196: OPTION_REGbits.PS = ps_cnt;
   622  00A1  0801               	movf	1,w	;volatile
   623  00A2  1283               	bcf	3,5	;RP0=0, select bank0
   624  00A3  063A               	xorwf	SetTMR0@ps_cnt,w
   625  00A4  39F8               	andlw	-8
   626  00A5  063A               	xorwf	SetTMR0@ps_cnt,w
   627  00A6  1683               	bsf	3,5	;RP0=1, select bank1
   628  00A7  0081               	movwf	1	;volatile
   629                           
   630                           ;main.c: 197: OPTION_REGbits.T0CS = 0b0;
   631  00A8  1281               	bcf	1,5	;volatile
   632                           
   633                           ;main.c: 199: TMR0value=0x100-TMR0value;
   634  00A9  3000               	movlw	0
   635  00AA  1283               	bcf	3,5	;RP0=0, select bank0
   636  00AB  00B4               	movwf	??_SetTMR0
   637  00AC  3001               	movlw	1
   638  00AD  00B5               	movwf	??_SetTMR0+1
   639  00AE  3000               	movlw	0
   640  00AF  00B6               	movwf	??_SetTMR0+2
   641  00B0  3000               	movlw	0
   642  00B1  00B7               	movwf	??_SetTMR0+3
   643  00B2  083C               	movf	SetTMR0@TMR0value,w
   644  00B3  02B4               	subwf	??_SetTMR0,f
   645  00B4  083D               	movf	SetTMR0@TMR0value+1,w
   646  00B5  1C03               	skipc
   647  00B6  0F3D               	incfsz	SetTMR0@TMR0value+1,w
   648  00B7  28B9               	goto	u491
   649  00B8  28BA               	goto	u492
   650  00B9                     u491:	
   651  00B9  02B5               	subwf	??_SetTMR0+1,f
   652  00BA                     u492:	
   653  00BA  083E               	movf	SetTMR0@TMR0value+2,w
   654  00BB  1C03               	skipc
   655  00BC  0F3E               	incfsz	SetTMR0@TMR0value+2,w
   656  00BD  28BF               	goto	u493
   657  00BE  28C0               	goto	u494
   658  00BF                     u493:	
   659  00BF  02B6               	subwf	??_SetTMR0+2,f
   660  00C0                     u494:	
   661  00C0  083F               	movf	SetTMR0@TMR0value+3,w
   662  00C1  1C03               	skipc
   663  00C2  0F3F               	incfsz	SetTMR0@TMR0value+3,w
   664  00C3  28C5               	goto	u495
   665  00C4  28C6               	goto	u496
   666  00C5                     u495:	
   667  00C5  02B7               	subwf	??_SetTMR0+3,f
   668  00C6                     u496:	
   669  00C6  0837               	movf	??_SetTMR0+3,w
   670  00C7  00BF               	movwf	SetTMR0@TMR0value+3
   671  00C8  0836               	movf	??_SetTMR0+2,w
   672  00C9  00BE               	movwf	SetTMR0@TMR0value+2
   673  00CA  0835               	movf	??_SetTMR0+1,w
   674  00CB  00BD               	movwf	SetTMR0@TMR0value+1
   675  00CC  0834               	movf	??_SetTMR0,w
   676  00CD  00BC               	movwf	SetTMR0@TMR0value
   677                           
   678                           ;main.c: 200: TMR0=(byte)TMR0value;
   679  00CE  083C               	movf	SetTMR0@TMR0value,w
   680  00CF  0081               	movwf	1	;volatile
   681                           
   682                           ;main.c: 201: return(TMR0value);
   683  00D0  083C               	movf	SetTMR0@TMR0value,w
   684  00D1  0008               	return
   685  00D2                     __end_of_SetTMR0:	
   686                           
   687                           	psect	text2
   688  019A                     __ptext2:	
   689 ;; *************** function ___lmul *****************
   690 ;; Defined at:
   691 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\Umul32.c"
   692 ;; Parameters:    Size  Location     Type
   693 ;;  multiplier      4    4[BANK0 ] unsigned long 
   694 ;;  multiplicand    4    8[BANK0 ] unsigned long 
   695 ;; Auto vars:     Size  Location     Type
   696 ;;  product         4   13[BANK0 ] unsigned long 
   697 ;; Return value:  Size  Location     Type
   698 ;;                  4    4[BANK0 ] unsigned long 
   699 ;; Registers used:
   700 ;;		wreg, status,2, status,0
   701 ;; Tracked objects:
   702 ;;		On entry : 0/0
   703 ;;		On exit  : 0/0
   704 ;;		Unchanged: 0/0
   705 ;; Data sizes:     COMMON   BANK0
   706 ;;      Params:         0       8
   707 ;;      Locals:         0       4
   708 ;;      Temps:          0       1
   709 ;;      Totals:         0      13
   710 ;;Total ram usage:       13 bytes
   711 ;; Hardware stack levels used:    1
   712 ;; Hardware stack levels required when called:    2
   713 ;; This function calls:
   714 ;;		Nothing
   715 ;; This function is called by:
   716 ;;		_SetTMR0
   717 ;; This function uses a non-reentrant model
   718 ;;
   719                           
   720                           
   721                           ;psect for function ___lmul
   722  019A                     ___lmul:	
   723                           
   724                           ;incstack = 0
   725                           ; Regs used in ___lmul: [wreg+status,2+status,0]
   726  019A  3000               	movlw	0
   727  019B  1283               	bcf	3,5	;RP0=0, select bank0
   728  019C  00B0               	movwf	___lmul@product+3
   729  019D  3000               	movlw	0
   730  019E  00AF               	movwf	___lmul@product+2
   731  019F  3000               	movlw	0
   732  01A0  00AE               	movwf	___lmul@product+1
   733  01A1  3000               	movlw	0
   734  01A2  00AD               	movwf	___lmul@product
   735  01A3                     l841:	
   736  01A3  1C24               	btfss	___lmul@multiplier,0
   737  01A4  29B9               	goto	l845
   738  01A5  0828               	movf	___lmul@multiplicand,w
   739  01A6  07AD               	addwf	___lmul@product,f
   740  01A7  0829               	movf	___lmul@multiplicand+1,w
   741  01A8  1103               	clrz
   742  01A9  1803               	skipnc
   743  01AA  3E01               	addlw	1
   744  01AB  1D03               	btfss	3,2
   745  01AC  07AE               	addwf	___lmul@product+1,f
   746  01AD  082A               	movf	___lmul@multiplicand+2,w
   747  01AE  1103               	clrz
   748  01AF  1803               	skipnc
   749  01B0  3E01               	addlw	1
   750  01B1  1D03               	btfss	3,2
   751  01B2  07AF               	addwf	___lmul@product+2,f
   752  01B3  082B               	movf	___lmul@multiplicand+3,w
   753  01B4  1103               	clrz
   754  01B5  1803               	skipnc
   755  01B6  3E01               	addlw	1
   756  01B7  1D03               	btfss	3,2
   757  01B8  07B0               	addwf	___lmul@product+3,f
   758  01B9                     l845:	
   759  01B9  3001               	movlw	1
   760  01BA  00AC               	movwf	??___lmul
   761  01BB                     u335:	
   762  01BB  1003               	clrc
   763  01BC  0DA8               	rlf	___lmul@multiplicand,f
   764  01BD  0DA9               	rlf	___lmul@multiplicand+1,f
   765  01BE  0DAA               	rlf	___lmul@multiplicand+2,f
   766  01BF  0DAB               	rlf	___lmul@multiplicand+3,f
   767  01C0  0BAC               	decfsz	??___lmul,f
   768  01C1  29BB               	goto	u335
   769  01C2  3001               	movlw	1
   770  01C3                     u345:	
   771  01C3  1003               	clrc
   772  01C4  0CA7               	rrf	___lmul@multiplier+3,f
   773  01C5  0CA6               	rrf	___lmul@multiplier+2,f
   774  01C6  0CA5               	rrf	___lmul@multiplier+1,f
   775  01C7  0CA4               	rrf	___lmul@multiplier,f
   776  01C8  3EFF               	addlw	-1
   777  01C9  1D03               	skipz
   778  01CA  29C3               	goto	u345
   779  01CB  0827               	movf	___lmul@multiplier+3,w
   780  01CC  0426               	iorwf	___lmul@multiplier+2,w
   781  01CD  0425               	iorwf	___lmul@multiplier+1,w
   782  01CE  0424               	iorwf	___lmul@multiplier,w
   783  01CF  1D03               	skipz
   784  01D0  29A3               	goto	l841
   785  01D1  0830               	movf	___lmul@product+3,w
   786  01D2  00A7               	movwf	?___lmul+3
   787  01D3  082F               	movf	___lmul@product+2,w
   788  01D4  00A6               	movwf	?___lmul+2
   789  01D5  082E               	movf	___lmul@product+1,w
   790  01D6  00A5               	movwf	?___lmul+1
   791  01D7  082D               	movf	___lmul@product,w
   792  01D8  00A4               	movwf	?___lmul
   793  01D9  0008               	return
   794  01DA                     __end_of___lmul:	
   795                           
   796                           	psect	text3
   797  013B                     __ptext3:	
   798 ;; *************** function ___lldiv *****************
   799 ;; Defined at:
   800 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\__lldiv.c"
   801 ;; Parameters:    Size  Location     Type
   802 ;;  divisor         4    4[BANK0 ] unsigned long 
   803 ;;  dividend        4    8[BANK0 ] unsigned long 
   804 ;; Auto vars:     Size  Location     Type
   805 ;;  quotient        4   13[BANK0 ] unsigned long 
   806 ;;  counter         1   17[BANK0 ] unsigned char 
   807 ;; Return value:  Size  Location     Type
   808 ;;                  4    4[BANK0 ] unsigned long 
   809 ;; Registers used:
   810 ;;		wreg, status,2, status,0
   811 ;; Tracked objects:
   812 ;;		On entry : 0/0
   813 ;;		On exit  : 0/0
   814 ;;		Unchanged: 0/0
   815 ;; Data sizes:     COMMON   BANK0
   816 ;;      Params:         0       8
   817 ;;      Locals:         0       5
   818 ;;      Temps:          0       1
   819 ;;      Totals:         0      14
   820 ;;Total ram usage:       14 bytes
   821 ;; Hardware stack levels used:    1
   822 ;; Hardware stack levels required when called:    2
   823 ;; This function calls:
   824 ;;		Nothing
   825 ;; This function is called by:
   826 ;;		_SetTMR0
   827 ;; This function uses a non-reentrant model
   828 ;;
   829                           
   830                           
   831                           ;psect for function ___lldiv
   832  013B                     ___lldiv:	
   833                           
   834                           ;incstack = 0
   835                           ; Regs used in ___lldiv: [wreg+status,2+status,0]
   836  013B  3000               	movlw	0
   837  013C  1283               	bcf	3,5	;RP0=0, select bank0
   838  013D  00B0               	movwf	___lldiv@quotient+3
   839  013E  3000               	movlw	0
   840  013F  00AF               	movwf	___lldiv@quotient+2
   841  0140  3000               	movlw	0
   842  0141  00AE               	movwf	___lldiv@quotient+1
   843  0142  3000               	movlw	0
   844  0143  00AD               	movwf	___lldiv@quotient
   845  0144  0827               	movf	___lldiv@divisor+3,w
   846  0145  0426               	iorwf	___lldiv@divisor+2,w
   847  0146  0425               	iorwf	___lldiv@divisor+1,w
   848  0147  0424               	iorwf	___lldiv@divisor,w
   849  0148  1903               	skipnz
   850  0149  2991               	goto	l873
   851  014A  01B1               	clrf	___lldiv@counter
   852  014B  0AB1               	incf	___lldiv@counter,f
   853  014C                     l859:	
   854  014C  1BA7               	btfsc	___lldiv@divisor+3,7
   855  014D  295C               	goto	l861
   856  014E  3001               	movlw	1
   857  014F  00AC               	movwf	??___lldiv
   858  0150                     u375:	
   859  0150  1003               	clrc
   860  0151  0DA4               	rlf	___lldiv@divisor,f
   861  0152  0DA5               	rlf	___lldiv@divisor+1,f
   862  0153  0DA6               	rlf	___lldiv@divisor+2,f
   863  0154  0DA7               	rlf	___lldiv@divisor+3,f
   864  0155  0BAC               	decfsz	??___lldiv,f
   865  0156  2950               	goto	u375
   866  0157  3001               	movlw	1
   867  0158  00AC               	movwf	??___lldiv
   868  0159  082C               	movf	??___lldiv,w
   869  015A  07B1               	addwf	___lldiv@counter,f
   870  015B  294C               	goto	l859
   871  015C                     l861:	
   872  015C  3001               	movlw	1
   873  015D  00AC               	movwf	??___lldiv
   874  015E                     u395:	
   875  015E  1003               	clrc
   876  015F  0DAD               	rlf	___lldiv@quotient,f
   877  0160  0DAE               	rlf	___lldiv@quotient+1,f
   878  0161  0DAF               	rlf	___lldiv@quotient+2,f
   879  0162  0DB0               	rlf	___lldiv@quotient+3,f
   880  0163  0BAC               	decfsz	??___lldiv,f
   881  0164  295E               	goto	u395
   882  0165  0827               	movf	___lldiv@divisor+3,w
   883  0166  022B               	subwf	___lldiv@dividend+3,w
   884  0167  1D03               	skipz
   885  0168  2973               	goto	u405
   886  0169  0826               	movf	___lldiv@divisor+2,w
   887  016A  022A               	subwf	___lldiv@dividend+2,w
   888  016B  1D03               	skipz
   889  016C  2973               	goto	u405
   890  016D  0825               	movf	___lldiv@divisor+1,w
   891  016E  0229               	subwf	___lldiv@dividend+1,w
   892  016F  1D03               	skipz
   893  0170  2973               	goto	u405
   894  0171  0824               	movf	___lldiv@divisor,w
   895  0172  0228               	subwf	___lldiv@dividend,w
   896  0173                     u405:	
   897  0173  1C03               	skipc
   898  0174  2984               	goto	l869
   899  0175  0824               	movf	___lldiv@divisor,w
   900  0176  02A8               	subwf	___lldiv@dividend,f
   901  0177  0825               	movf	___lldiv@divisor+1,w
   902  0178  1C03               	skipc
   903  0179  0F25               	incfsz	___lldiv@divisor+1,w
   904  017A  02A9               	subwf	___lldiv@dividend+1,f
   905  017B  0826               	movf	___lldiv@divisor+2,w
   906  017C  1C03               	skipc
   907  017D  0F26               	incfsz	___lldiv@divisor+2,w
   908  017E  02AA               	subwf	___lldiv@dividend+2,f
   909  017F  0827               	movf	___lldiv@divisor+3,w
   910  0180  1C03               	skipc
   911  0181  0F27               	incfsz	___lldiv@divisor+3,w
   912  0182  02AB               	subwf	___lldiv@dividend+3,f
   913  0183  142D               	bsf	___lldiv@quotient,0
   914  0184                     l869:	
   915  0184  3001               	movlw	1
   916  0185                     u415:	
   917  0185  1003               	clrc
   918  0186  0CA7               	rrf	___lldiv@divisor+3,f
   919  0187  0CA6               	rrf	___lldiv@divisor+2,f
   920  0188  0CA5               	rrf	___lldiv@divisor+1,f
   921  0189  0CA4               	rrf	___lldiv@divisor,f
   922  018A  3EFF               	addlw	-1
   923  018B  1D03               	skipz
   924  018C  2985               	goto	u415
   925  018D  3001               	movlw	1
   926  018E  02B1               	subwf	___lldiv@counter,f
   927  018F  1D03               	btfss	3,2
   928  0190  295C               	goto	l861
   929  0191                     l873:	
   930  0191  0830               	movf	___lldiv@quotient+3,w
   931  0192  00A7               	movwf	?___lldiv+3
   932  0193  082F               	movf	___lldiv@quotient+2,w
   933  0194  00A6               	movwf	?___lldiv+2
   934  0195  082E               	movf	___lldiv@quotient+1,w
   935  0196  00A5               	movwf	?___lldiv+1
   936  0197  082D               	movf	___lldiv@quotient,w
   937  0198  00A4               	movwf	?___lldiv
   938  0199  0008               	return
   939  019A                     __end_of___lldiv:	
   940                           
   941                           	psect	text4
   942  020A                     __ptext4:	
   943 ;; *************** function _SETpinRST *****************
   944 ;; Defined at:
   945 ;;		line 168 in file "main.c"
   946 ;; Parameters:    Size  Location     Type
   947 ;;  Status          2    4[BANK0 ] int 
   948 ;; Auto vars:     Size  Location     Type
   949 ;;		None
   950 ;; Return value:  Size  Location     Type
   951 ;;                  1    wreg      void 
   952 ;; Registers used:
   953 ;;		wreg, status,2, status,0
   954 ;; Tracked objects:
   955 ;;		On entry : 0/0
   956 ;;		On exit  : 0/0
   957 ;;		Unchanged: 0/0
   958 ;; Data sizes:     COMMON   BANK0
   959 ;;      Params:         0       2
   960 ;;      Locals:         0       0
   961 ;;      Temps:          0       0
   962 ;;      Totals:         0       2
   963 ;;Total ram usage:        2 bytes
   964 ;; Hardware stack levels used:    1
   965 ;; Hardware stack levels required when called:    2
   966 ;; This function calls:
   967 ;;		Nothing
   968 ;; This function is called by:
   969 ;;		_main
   970 ;; This function uses a non-reentrant model
   971 ;;
   972                           
   973                           
   974                           ;psect for function _SETpinRST
   975  020A                     _SETpinRST:	
   976                           
   977                           ;main.c: 170: if (Status) {TRISIO1 = 0b1; GPIObits.GP1 = 0b1;}
   978                           
   979                           ;incstack = 0
   980                           ; Regs used in _SETpinRST: [wreg+status,2+status,0]
   981  020A  1283               	bcf	3,5	;RP0=0, select bank0
   982  020B  0824               	movf	SETpinRST@Status,w
   983  020C  0425               	iorwf	SETpinRST@Status+1,w
   984  020D  1903               	btfsc	3,2
   985  020E  2A14               	goto	l71
   986  020F  1683               	bsf	3,5	;RP0=1, select bank1
   987  0210  1485               	bsf	5,1	;volatile
   988  0211  1283               	bcf	3,5	;RP0=0, select bank0
   989  0212  1485               	bsf	5,1	;volatile
   990  0213  0008               	return
   991  0214                     l71:	
   992                           
   993                           ;main.c: 171: else {GPIObits.GP1 = 0b0; TRISIO1 = 0b0;}
   994  0214  1085               	bcf	5,1	;volatile
   995  0215  1683               	bsf	3,5	;RP0=1, select bank1
   996  0216  1085               	bcf	5,1	;volatile
   997  0217  0008               	return
   998  0218                     __end_of_SETpinRST:	
   999                           
  1000                           	psect	text5
  1001  00D2                     __ptext5:	
  1002 ;; *************** function _myIsr *****************
  1003 ;; Defined at:
  1004 ;;		line 89 in file "main.c"
  1005 ;; Parameters:    Size  Location     Type
  1006 ;;		None
  1007 ;; Auto vars:     Size  Location     Type
  1008 ;;		None
  1009 ;; Return value:  Size  Location     Type
  1010 ;;                  1    wreg      void 
  1011 ;; Registers used:
  1012 ;;		wreg, status,2, status,0, pclath, cstack
  1013 ;; Tracked objects:
  1014 ;;		On entry : 0/0
  1015 ;;		On exit  : 0/0
  1016 ;;		Unchanged: 0/0
  1017 ;; Data sizes:     COMMON   BANK0
  1018 ;;      Params:         0       0
  1019 ;;      Locals:         0       0
  1020 ;;      Temps:          0       2
  1021 ;;      Totals:         0       2
  1022 ;;Total ram usage:        2 bytes
  1023 ;; Hardware stack levels used:    1
  1024 ;; Hardware stack levels required when called:    1
  1025 ;; This function calls:
  1026 ;;		i1_SETpinRST
  1027 ;; This function is called by:
  1028 ;;		Interrupt level 1
  1029 ;; This function uses a non-reentrant model
  1030 ;;
  1031                           
  1032                           
  1033                           ;psect for function _myIsr
  1034  00D2                     _myIsr:	
  1035                           
  1036                           ;main.c: 92: GPIObits.GP5=0b0;
  1037  00D2  1285               	bcf	5,5	;volatile
  1038                           
  1039                           ;main.c: 93: if(INTCONbits.TMR0IE && INTCONbits.TMR0IF)
  1040  00D3  1A8B               	btfsc	11,5	;volatile
  1041  00D4  1D0B               	btfss	11,2	;volatile
  1042  00D5  2932               	goto	i1l967
  1043                           
  1044                           ;main.c: 94: {;main.c: 95: INTCONbits.TMR0IF = 0b0;
  1045  00D6  110B               	bcf	11,2	;volatile
  1046                           
  1047                           ;main.c: 96: TMR0 = TMR0_value;
  1048  00D7  0847               	movf	_TMR0_value,w
  1049  00D8  0081               	movwf	1	;volatile
  1050                           
  1051                           ;main.c: 98: if(cntRSTpls>0)
  1052  00D9  0841               	movf	_cntRSTpls,w
  1053  00DA  0442               	iorwf	_cntRSTpls+1,w
  1054  00DB  1903               	btfsc	3,2
  1055  00DC  28EC               	goto	i1l46
  1056                           
  1057                           ;main.c: 99: {;main.c: 100: cntRST = 10*100;
  1058  00DD  30E8               	movlw	232
  1059  00DE  00C5               	movwf	_cntRST
  1060  00DF  3003               	movlw	3
  1061  00E0  00C6               	movwf	_cntRST+1
  1062                           
  1063                           ;main.c: 101: cntWD = 60*100;
  1064  00E1  3070               	movlw	112
  1065  00E2  00C3               	movwf	_cntWD
  1066  00E3  3017               	movlw	23
  1067  00E4  00C4               	movwf	_cntWD+1
  1068                           
  1069                           ;main.c: 102: cntRSTpls--;
  1070  00E5  3001               	movlw	1
  1071  00E6  02C1               	subwf	_cntRSTpls,f
  1072  00E7  3000               	movlw	0
  1073  00E8  1C03               	skipc
  1074  00E9  03C2               	decf	_cntRSTpls+1,f
  1075  00EA  02C2               	subwf	_cntRSTpls+1,f
  1076                           
  1077                           ;main.c: 103: }
  1078  00EB  2932               	goto	i1l967
  1079  00EC                     i1l46:	
  1080                           
  1081                           ;main.c: 104: else;main.c: 105: {;main.c: 106: if((GPIObits.GP3==0b1) || (GPIObits.GP2==
      +                          0b1))
  1082  00EC  1985               	btfsc	5,3	;volatile
  1083  00ED  28F0               	goto	i1l939
  1084  00EE  1D05               	btfss	5,2	;volatile
  1085  00EF  28F5               	goto	i1l941
  1086  00F0                     i1l939:	
  1087                           
  1088                           ;main.c: 107: cntRST=10*100;
  1089  00F0  30E8               	movlw	232
  1090  00F1  00C5               	movwf	_cntRST
  1091  00F2  3003               	movlw	3
  1092  00F3  00C6               	movwf	_cntRST+1
  1093  00F4  28FF               	goto	i1l945
  1094  00F5                     i1l941:	
  1095                           
  1096                           ;main.c: 108: else;main.c: 109: if (cntRST>0) cntRST--;
  1097  00F5  0845               	movf	_cntRST,w
  1098  00F6  0446               	iorwf	_cntRST+1,w
  1099  00F7  1903               	btfsc	3,2
  1100  00F8  28FF               	goto	i1l945
  1101  00F9  3001               	movlw	1
  1102  00FA  02C5               	subwf	_cntRST,f
  1103  00FB  3000               	movlw	0
  1104  00FC  1C03               	skipc
  1105  00FD  03C6               	decf	_cntRST+1,f
  1106  00FE  02C6               	subwf	_cntRST+1,f
  1107  00FF                     i1l945:	
  1108                           
  1109                           ;main.c: 111: if(GPIObits.GP4!=lastGPIO4mirror)
  1110  00FF  0E05               	swapf	5,w	;volatile
  1111  0100  3901               	andlw	1
  1112  0101  0648               	xorwf	_lastGPIO4mirror,w
  1113  0102  1903               	skipnz
  1114  0103  2909               	goto	i1l949
  1115                           
  1116                           ;main.c: 112: cntWD = 60*100;
  1117  0104  3070               	movlw	112
  1118  0105  00C3               	movwf	_cntWD
  1119  0106  3017               	movlw	23
  1120  0107  00C4               	movwf	_cntWD+1
  1121  0108  2913               	goto	i1l953
  1122  0109                     i1l949:	
  1123                           
  1124                           ;main.c: 113: else;main.c: 114: if(cntWD>0) cntWD--;
  1125  0109  0843               	movf	_cntWD,w
  1126  010A  0444               	iorwf	_cntWD+1,w
  1127  010B  1903               	btfsc	3,2
  1128  010C  2913               	goto	i1l953
  1129  010D  3001               	movlw	1
  1130  010E  02C3               	subwf	_cntWD,f
  1131  010F  3000               	movlw	0
  1132  0110  1C03               	skipc
  1133  0111  03C4               	decf	_cntWD+1,f
  1134  0112  02C4               	subwf	_cntWD+1,f
  1135  0113                     i1l953:	
  1136                           
  1137                           ;main.c: 116: lastGPIO4mirror=GPIObits.GP4;
  1138  0113  3000               	movlw	0
  1139  0114  1A05               	btfsc	5,4	;volatile
  1140  0115  3001               	movlw	1
  1141  0116  00C8               	movwf	_lastGPIO4mirror
  1142                           
  1143                           ;main.c: 118: if((cntWD==0) || (cntRST==0))
  1144  0117  0843               	movf	_cntWD,w
  1145  0118  0444               	iorwf	_cntWD+1,w
  1146  0119  1903               	btfsc	3,2
  1147  011A  291F               	goto	i1l959
  1148  011B  0845               	movf	_cntRST,w
  1149  011C  0446               	iorwf	_cntRST+1,w
  1150  011D  1D03               	btfss	3,2
  1151  011E  292D               	goto	i1l965
  1152  011F                     i1l959:	
  1153                           
  1154                           ;main.c: 119: {;main.c: 120: SETpinRST(0b0);
  1155  011F  3000               	movlw	0
  1156  0120  00A0               	movwf	i1SETpinRST@Status
  1157  0121  00A1               	movwf	i1SETpinRST@Status+1
  1158  0122  2218               	fcall	i1_SETpinRST
  1159                           
  1160                           ;main.c: 121: cntWD = 60*100;
  1161  0123  3070               	movlw	112
  1162  0124  1283               	bcf	3,5	;RP0=0, select bank0
  1163  0125  00C3               	movwf	_cntWD
  1164  0126  3017               	movlw	23
  1165  0127  00C4               	movwf	_cntWD+1
  1166                           
  1167                           ;main.c: 122: cntRSTpls = 1*100;
  1168  0128  3064               	movlw	100
  1169  0129  00C1               	movwf	_cntRSTpls
  1170  012A  3000               	movlw	0
  1171  012B  00C2               	movwf	_cntRSTpls+1
  1172                           
  1173                           ;main.c: 123: }
  1174  012C  2932               	goto	i1l967
  1175  012D                     i1l965:	
  1176                           
  1177                           ;main.c: 124: else;main.c: 125: SETpinRST(0b1);
  1178  012D  3001               	movlw	1
  1179  012E  00A0               	movwf	i1SETpinRST@Status
  1180  012F  3000               	movlw	0
  1181  0130  00A1               	movwf	i1SETpinRST@Status+1
  1182  0131  2218               	fcall	i1_SETpinRST
  1183  0132                     i1l967:	
  1184                           
  1185                           ;main.c: 126: };main.c: 127: };main.c: 128: GPIObits.GP5=0b1;
  1186  0132  1283               	bcf	3,5	;RP0=0, select bank0
  1187  0133  1685               	bsf	5,5	;volatile
  1188  0134  0823               	movf	??_myIsr+1,w
  1189  0135  008A               	movwf	10
  1190  0136  0E22               	swapf	??_myIsr^0,w
  1191  0137  0083               	movwf	3
  1192  0138  0EDE               	swapf	94,f
  1193  0139  0E5E               	swapf	94,w
  1194  013A  0009               	retfie
  1195  013B                     __end_of_myIsr:	
  1196                           
  1197                           	psect	intentry
  1198  0004                     __pintentry:	
  1199                           ;incstack = 0
  1200                           ; Regs used in _myIsr: [wreg+status,2+status,0+pclath+cstack]
  1201                           
  1202  0004                     interrupt_function:	
  1203  005E                     saved_w	set	btemp
  1204  0004  00DE               	movwf	btemp
  1205  0005  0E03               	swapf	3,w
  1206  0006  1283               	bcf	3,5	;RP0=0, select bank0
  1207  0007  00A2               	movwf	??_myIsr
  1208  0008  080A               	movf	10,w
  1209  0009  00A3               	movwf	??_myIsr+1
  1210  000A  28D2               	ljmp	_myIsr
  1211                           
  1212                           	psect	text6
  1213  0218                     __ptext6:	
  1214 ;; *************** function i1_SETpinRST *****************
  1215 ;; Defined at:
  1216 ;;		line 168 in file "main.c"
  1217 ;; Parameters:    Size  Location     Type
  1218 ;;  Status          2    0[BANK0 ] int 
  1219 ;; Auto vars:     Size  Location     Type
  1220 ;;		None
  1221 ;; Return value:  Size  Location     Type
  1222 ;;                  1    wreg      void 
  1223 ;; Registers used:
  1224 ;;		wreg, status,2, status,0
  1225 ;; Tracked objects:
  1226 ;;		On entry : 0/0
  1227 ;;		On exit  : 0/0
  1228 ;;		Unchanged: 0/0
  1229 ;; Data sizes:     COMMON   BANK0
  1230 ;;      Params:         0       2
  1231 ;;      Locals:         0       0
  1232 ;;      Temps:          0       0
  1233 ;;      Totals:         0       2
  1234 ;;Total ram usage:        2 bytes
  1235 ;; Hardware stack levels used:    1
  1236 ;; This function calls:
  1237 ;;		Nothing
  1238 ;; This function is called by:
  1239 ;;		_myIsr
  1240 ;; This function uses a non-reentrant model
  1241 ;;
  1242                           
  1243                           
  1244                           ;psect for function i1_SETpinRST
  1245  0218                     i1_SETpinRST:	
  1246                           
  1247                           ;main.c: 170: if (Status) {TRISIO1 = 0b1; GPIObits.GP1 = 0b1;}
  1248                           
  1249                           ;incstack = 0
  1250                           ; Regs used in i1_SETpinRST: [wreg+status,2+status,0]
  1251  0218  1283               	bcf	3,5	;RP0=0, select bank0
  1252  0219  0820               	movf	i1SETpinRST@Status,w
  1253  021A  0421               	iorwf	i1SETpinRST@Status+1,w
  1254  021B  1903               	btfsc	3,2
  1255  021C  2A22               	goto	i1l71
  1256  021D  1683               	bsf	3,5	;RP0=1, select bank1
  1257  021E  1485               	bsf	5,1	;volatile
  1258  021F  1283               	bcf	3,5	;RP0=0, select bank0
  1259  0220  1485               	bsf	5,1	;volatile
  1260  0221  0008               	return
  1261  0222                     i1l71:	
  1262                           
  1263                           ;main.c: 171: else {GPIObits.GP1 = 0b0; TRISIO1 = 0b0;}
  1264  0222  1085               	bcf	5,1	;volatile
  1265  0223  1683               	bsf	3,5	;RP0=1, select bank1
  1266  0224  1085               	bcf	5,1	;volatile
  1267  0225  0008               	return
  1268  0226                     __end_ofi1_SETpinRST:	
  1269  005E                     btemp	set	94	;btemp
  1270  005E                     wtemp0	set	94


Data Sizes:
    Strings     0
    Constant    4
    Data        0
    BSS         8
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON            0      0       0
    BANK0            62     33      41

Pointer List with Targets:

    None.

Critical Paths under _main in COMMON

    None.

Critical Paths under _myIsr in COMMON

    None.

Critical Paths under _main in BANK0

    _main->_SetTMR0
    _SetTMR0->___lldiv

Critical Paths under _myIsr in BANK0

    _myIsr->i1_SETpinRST

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 1     1      0    1277
                                             32 BANK0      1     1      0
                          _SETpinRST
                            _SetTMR0
 ---------------------------------------------------------------------------------
 (1) _SetTMR0                                             14    12      2    1079
                                             18 BANK0     14    12      2
                            ___lldiv
                             ___lmul
 ---------------------------------------------------------------------------------
 (2) ___lmul                                              13     5      8     244
                                              4 BANK0     13     5      8
 ---------------------------------------------------------------------------------
 (2) ___lldiv                                             14     6      8     466
                                              4 BANK0     14     6      8
 ---------------------------------------------------------------------------------
 (1) _SETpinRST                                            2     0      2     198
                                              4 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (3) _myIsr                                                2     2      0      74
                                              2 BANK0      2     2      0
                        i1_SETpinRST
 ---------------------------------------------------------------------------------
 (4) i1_SETpinRST                                          2     0      2      74
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _SETpinRST
   _SetTMR0
     ___lldiv
     ___lmul

 _myIsr (ROOT)
   i1_SETpinRST

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            0      0       0       0        0.0%
EEDATA              80      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
BITBANK0            3E      0       0       3        0.0%
BANK0               3E     21      29       4       66.1%
ABS                  0      0      29       5        0.0%
DATA                 0      0      29       6        0.0%


Microchip Technology PIC Macro Assembler V2.05 build -831301201 
Symbol Table                                                                                   Sat Aug 24 14:34:59 2019

                      pc 0002        i1SETpinRST@Status 0020              __CFG_CP$OFF 0000  
                     l71 0214                       l81 009F                       l65 0209  
                     fsr 0004                      l901 0098                      l841 01A3  
                    l861 015C                      l845 01B9                      l873 0191  
                    l859 014C                      l869 0184                      l887 0021  
                    l899 008B                      u405 0173                      u415 0185  
                    u335 01BB                      u345 01C3             __CFG_CPD$OFF 0000  
                    u454 002B                      u375 0150                      u463 0089  
                    u455 0028                      u395 015E                      u491 00B9  
                    u492 00BA                      u493 00BF                      u494 00C0  
                    u495 00C5                      u496 00C6                     _GPIO 0005  
                   i1l46 00EC                     i1l71 0222                     _TMR0 0001  
                   _main 01DA                     btemp 005E                     start 000B  
        __end_of_SetTMR0 00D2          _lastGPIO4mirror 0048                    ?_main 0020  
          __CFG_WDTE$OFF 0000                    _CMCON 0019                    _ANSEL 009F  
        __end_of___lldiv 019A                    i1l941 00F5                    i1l953 0113  
                  i1l945 00FF                    i1l939 00F0                    i1l965 012D  
                  i1l949 0109                    i1l959 011F                    i1l967 0132  
    ___lmul@multiplicand 0028            __CFG_PWRTE$ON 0000                    _cntWD 0043  
                  _myIsr 00D2           __CFG_BOREN$OFF 0000                    pclath 000A  
                  status 0003                    wtemp0 005E       __size_of_SETpinRST 000E  
         __CFG_MCLRE$OFF 0000          __initialization 000C             __end_of_main 020A  
                 ??_main 0040             ?i1_SETpinRST 0020                   ?_myIsr 0020  
              ??_SetTMR0 0034                   ___lmul 019A                ??___lldiv 002C  
                 _cntRST 0045        __end_of_SETpinRST 0218                   saved_w 005E  
__end_of__initialization 0015           __pcstackCOMMON 0000            __end_of_myIsr 013B  
         _OPTION_REGbits 0081                  ??_myIsr 0022               __pbssBANK0 0041  
             __pmaintext 01DA                  ?___lmul 0024               __pintentry 0004  
         ___lmul@product 002D     __size_ofi1_SETpinRST 000E                  _TRISIO0 0428  
                _TRISIO1 0429                  _TRISIO2 042A                  _TRISIO3 042B  
                _TRISIO4 042C                  _TRISIO5 042D               __stringtab 0226  
                _SetTMR0 0017          __size_of___lmul 0040                  ___lldiv 013B  
        SETpinRST@Status 0024                  __ptext1 0017                  __ptext2 019A  
                __ptext3 013B                  __ptext4 020A                  __ptext5 00D2  
                __ptext6 0218     end_of_initialization 0015         SetTMR0@TMR0value 003C  
        ___lldiv@divisor 0024          ___lldiv@counter 0031                _SETpinRST 020A  
         __end_of___lmul 01DA      start_initialization 000C               ?_SETpinRST 0024  
               ??___lmul 002C                ___latbits 0000            __pcstackBANK0 0020  
               ?_SetTMR0 0032                _cntRSTpls 0041                 ?___lldiv 0024  
              __pstrings 0226            ??i1_SETpinRST 0000              ??_SETpinRST 0000  
         __size_of_myIsr 0069            SetTMR0@ps_cnt 003A        interrupt_function 0004  
               _GPIObits 0005              __stringbase 022B      __end_ofi1_SETpinRST 0226  
      ___lmul@multiplier 0024         __size_of_SetTMR0 00BB         __size_of___lldiv 005F  
        SetTMR0@clk_freq 022C       __end_of__stringtab 022C          SetTMR0@value_ms 0032  
        SetTMR0@ps_value 0038            __size_of_main 0030              i1_SETpinRST 0218  
             _INTCONbits 000B                 intlevel1 0000         ___lldiv@dividend 0028  
              stringcode 0226  __end_ofSetTMR0@clk_freq 0230         ___lldiv@quotient 002D  
               stringdir 0226                 stringtab 0226               _TMR0_value 0047  
      __CFG_FOSC$INTRCIO 0000  
